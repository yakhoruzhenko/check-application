Local Development and Run
##########################

Application Local Run
---------------------

You can run the Check Application locally with the following command. It doesn't require any dependencies installation because the application and its dependencies, including PostgreSQL, will be run in a Docker environment:

.. code-block:: bash

   make up

This will start the application in a Docker container. Ensure that Docker is installed on your system before running this command.

Once the application is running, you can access its API documentation at http://localhost:8000/docs (or http://0.0.0.0:8000/docs). The documentation is autogenerated using OpenAPI/Swagger and provides a self-documented interface for the API.

Local Development
------------------

To start developing locally, first, create a Python virtual environment. Then, with the environment activated, install all required dependencies by running the following command (this step is necessary for syntax highlighting in your editor):

.. code-block:: bash

   pip3 install -r requirements.txt

Linting and Static Analysis
----------------------------
To run the linting and static analysis tools, use the following command:

.. code-block:: bash

   make lint

This will run `flake8` for code style checks, `isort` for sorting imports, `mypy` for type checking, and `yamllint` for YAML file validation.

Security Testing
----------------
To run the security tests using `bandit`, use the following command:

.. code-block:: bash

   make sec

This will run `bandit` to check for potential security vulnerabilities in the code.

Seeding the Database
--------------------

You can seed the local database with dummy data using the following command.

.. code-block:: bash  

   make seed  

This command starts the application in detached mode and runs a script inside the container to populate the database with test data.

Shut Down Services
------------------
To shut down the application and stop the services, use:

.. code-block:: bash

   make down

This will stop the Docker containers without removing any associated volumes.

Shut Down and Remove Volumes
----------------------------
To shut down the application and remove all existing volumes, run:

.. code-block:: bash

   make down-v

This will stop the Docker containers and remove any persistent volumes associated with the application.

Clean Up
--------
To clean up temporary files: `.pytest_cache`, `.mypy_cache`, `.coverage`, run:

.. code-block:: bash

   make clean
